import argparse

def ParseArgs():
	parser = argparse.ArgumentParser(description='Model Params')
	parser.add_argument('--lr', default=1e-3, type=float, help='learning rate')
	parser.add_argument('--ext', default=0.5, type=float, help='learning rate')
	parser.add_argument('--gtw', default=0.1, type=float, help='learning rate')
	parser.add_argument('--sub', default=0.1, type=float, help='sub maxtrix')
	parser.add_argument('--ctra', default=0.001, type=float, help='sub maxtrix')
	parser.add_argument('--b2', default=1, type=float, help='learning rate')
	parser.add_argument('--anchor_set_num', default=32, type=int, help='anchorset_num')
	parser.add_argument('--batch', default=4096, type=int, help='batch size')
	parser.add_argument('--seed', default=500, type=int, help='seed')
	parser.add_argument('--tstBat', default=256, type=int, help='number of users in a testing batch')
	parser.add_argument('--reg', default=1e-4, type=float, help='weight decay regularizer')
	parser.add_argument('--ssl_reg', default=1, type=float, help='contrastive regularizer')
	parser.add_argument('--epoch', default=100, type=int, help='number of epochs')
	parser.add_argument('--decay', default=0.96, type=float, help='weight decay rate')
	parser.add_argument('--save_path', default='tem', help='file name to save model and training record')
	parser.add_argument('--latdim', default=32, type=int, help='embedding size')
	parser.add_argument('--head', default=4, type=int, help='number of heads in attention')
	parser.add_argument('--gcn_layer', default=2, type=int, help='number of gcn layers')
	parser.add_argument('--gt_layer', default=1, type=int, help='number of graph transformer layers')
	parser.add_argument('--pnn_layer', default=1, type=int, help='number of graph transformer layers')
	parser.add_argument('--load_model', default=None, help='model name to load')
	parser.add_argument('--topk', default=20, type=int, help='K of top K')
	parser.add_argument('--data', default='lastfm', type=str, help='name of dataset')
	parser.add_argument('--tstEpoch', default=3, type=int, help='number of epoch to test while training')
	parser.add_argument('--seedNum', default=9000, type=int, help='number of seeds in patch masking')
	parser.add_argument('--maskDepth', default=2, type=int, help='depth to mask')
	parser.add_argument('--fixSteps', default=10, type=int, help='steps to train on the same sampled graph')
	parser.add_argument('--keepRate', default=0.9, type=float, help='ratio of nodes to keep')
	parser.add_argument('--keepRate2', default=0.7, type=float, help='ratio of nodes to keep')
	parser.add_argument('--reRate', default=0.8, type=float, help='ratio of nodes to keep')
	parser.add_argument('--addRate', default=0.01,type=float, help='ratio of nodes to keep')
	parser.add_argument('--addNoise', default=0.0,type=float, help='ratio of nodes to keep')
	parser.add_argument('--gpu', default='0', type=str, help='indicates which gpu to use')
	parser.add_argument('--eps', default=0.1, type=float, help='scaled weight as reward')
	parser.add_argument('--approximate', dest='approximate', default=-1, type=int,
						help='k-hop shortest path distance. -1 means exact shortest path')  # -1, 2
	return parser.parse_args()
args = ParseArgs()
